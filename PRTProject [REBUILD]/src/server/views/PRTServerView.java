/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package server.views;

import java.awt.Frame;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.JTextField;
import server.main.PRTServerController;

/**
 *
 * @author Administrator
 */
public class PRTServerView extends javax.swing.JFrame {

    private final PRTServerController serverController;

    /**
     * Creates new form PRTServerView
     */
    public PRTServerView(PRTServerController serverController) {
        this.serverController = serverController;
        initComponents();
        PRTServerSketch pRTServerSketch = new PRTServerSketch();
        visualizationPanel.add(pRTServerSketch);
        pRTServerSketch.init();
        setExtendedState(Frame.MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        statePanel = new javax.swing.JPanel();
        realTimeButton = new javax.swing.JButton();
        simulatorButton = new javax.swing.JButton();
        actionsPanel = new javax.swing.JPanel();
        loadMapButton = new javax.swing.JButton();
        startServerButton = new javax.swing.JButton();
        stopServerButton = new javax.swing.JButton();
        generatePodcarsButton = new javax.swing.JButton();
        numberOfPodcarsMustBeGenerated = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        statsPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        podcarPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        podcarTable = new javax.swing.JTable();
        ridesPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ridesTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        bufferedRidesTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        visualizationScrollPane = new javax.swing.JScrollPane();
        visualizationPanel = new javax.swing.JPanel();

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        statePanel.setPreferredSize(new java.awt.Dimension(400, 35));

        realTimeButton.setText("Real Time Mode");
        realTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realTimeButtonActionPerformed(evt);
            }
        });
        statePanel.add(realTimeButton);

        simulatorButton.setText("Simulation Mode");
        simulatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulatorButtonActionPerformed(evt);
            }
        });
        statePanel.add(simulatorButton);

        getContentPane().add(statePanel, java.awt.BorderLayout.NORTH);

        actionsPanel.setPreferredSize(new java.awt.Dimension(130, 273));

        loadMapButton.setText("Load Map");
        loadMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMapButtonActionPerformed(evt);
            }
        });

        startServerButton.setText("Start Server");
        startServerButton.setEnabled(false);
        startServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerButtonActionPerformed(evt);
            }
        });

        stopServerButton.setText("Stop Server");
        stopServerButton.setEnabled(false);
        stopServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopServerButtonActionPerformed(evt);
            }
        });

        generatePodcarsButton.setText("Generate Podcars");
        generatePodcarsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePodcarsButtonActionPerformed(evt);
            }
        });

        numberOfPodcarsMustBeGenerated.setText("3");
        numberOfPodcarsMustBeGenerated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfPodcarsMustBeGeneratedActionPerformed(evt);
            }
        });

        jLabel2.setText("new podcars");

        javax.swing.GroupLayout actionsPanelLayout = new javax.swing.GroupLayout(actionsPanel);
        actionsPanel.setLayout(actionsPanelLayout);
        actionsPanelLayout.setHorizontalGroup(
            actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(generatePodcarsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
            .addComponent(loadMapButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(startServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(stopServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(actionsPanelLayout.createSequentialGroup()
                .addComponent(numberOfPodcarsMustBeGenerated, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        actionsPanelLayout.setVerticalGroup(
            actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionsPanelLayout.createSequentialGroup()
                .addComponent(loadMapButton)
                .addGap(28, 28, 28)
                .addGroup(actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfPodcarsMustBeGenerated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generatePodcarsButton)
                .addGap(129, 129, 129)
                .addComponent(startServerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopServerButton))
        );

        getContentPane().add(actionsPanel, java.awt.BorderLayout.WEST);

        statsPanel.setPreferredSize(new java.awt.Dimension(300, 271));

        podcarTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Current Vertex", "Mode", "Parking Vertex"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        podcarTable.setToolTipText("");
        jScrollPane1.setViewportView(podcarTable);

        javax.swing.GroupLayout podcarPanelLayout = new javax.swing.GroupLayout(podcarPanel);
        podcarPanel.setLayout(podcarPanelLayout);
        podcarPanelLayout.setHorizontalGroup(
            podcarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
        );
        podcarPanelLayout.setVerticalGroup(
            podcarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Podcars", podcarPanel);

        ridesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From", "To", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ridesTable);

        bufferedRidesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "From", "To", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(bufferedRidesTable);

        jLabel3.setText("Handled Rides:");

        jLabel4.setText("Bufferd Rides:");

        javax.swing.GroupLayout ridesPanelLayout = new javax.swing.GroupLayout(ridesPanel);
        ridesPanel.setLayout(ridesPanelLayout);
        ridesPanelLayout.setHorizontalGroup(
            ridesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(ridesPanelLayout.createSequentialGroup()
                .addGroup(ridesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(0, 223, Short.MAX_VALUE))
        );
        ridesPanelLayout.setVerticalGroup(
            ridesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ridesPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Rides", ridesPanel);

        javax.swing.GroupLayout statsPanelLayout = new javax.swing.GroupLayout(statsPanel);
        statsPanel.setLayout(statsPanelLayout);
        statsPanelLayout.setHorizontalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        statsPanelLayout.setVerticalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        getContentPane().add(statsPanel, java.awt.BorderLayout.EAST);

        visualizationPanel.setPreferredSize(new java.awt.Dimension(1000, 786));

        javax.swing.GroupLayout visualizationPanelLayout = new javax.swing.GroupLayout(visualizationPanel);
        visualizationPanel.setLayout(visualizationPanelLayout);
        visualizationPanelLayout.setHorizontalGroup(
            visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        visualizationPanelLayout.setVerticalGroup(
            visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 786, Short.MAX_VALUE)
        );

        visualizationScrollPane.setViewportView(visualizationPanel);

        getContentPane().add(visualizationScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void simulatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulatorButtonActionPerformed
        this.serverController.setSimulatorMode();
    }//GEN-LAST:event_simulatorButtonActionPerformed

    private void realTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realTimeButtonActionPerformed
        this.serverController.setRealTimeMode();
    }

    public JButton getRealTimeButton() {
        return realTimeButton;
    }

    public JButton getSimulatorButton() {
        return simulatorButton;
    }//GEN-LAST:event_realTimeButtonActionPerformed

    private void generatePodcarsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePodcarsButtonActionPerformed
        this.serverController.generatePodcars();
    }//GEN-LAST:event_generatePodcarsButtonActionPerformed

    private void stopServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopServerButtonActionPerformed
        this.serverController.stopServer();
    }//GEN-LAST:event_stopServerButtonActionPerformed

    private void startServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerButtonActionPerformed
        this.serverController.startServer();
    }//GEN-LAST:event_startServerButtonActionPerformed

    private void loadMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMapButtonActionPerformed
        this.serverController.loadMap();
    }//GEN-LAST:event_loadMapButtonActionPerformed

    private void numberOfPodcarsMustBeGeneratedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfPodcarsMustBeGeneratedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberOfPodcarsMustBeGeneratedActionPerformed

    public JButton getLoadMapButton() {
        return loadMapButton;
    }

    public JButton getStartServerButton() {
        return startServerButton;
    }

    public JButton getStopServerButton() {
        return stopServerButton;
    }

    public JTable getPodcarTable() {
        return podcarTable;
    }

    public JTextField getNumberOfPodcarsMustBeGenerated() {
        return numberOfPodcarsMustBeGenerated;
    }

    public JTable getRidesTable() {
        return ridesTable;
    }

    public JTable getBufferedRidesTable() {
        return bufferedRidesTable;
    }

    
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PRTServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PRTServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PRTServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PRTServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PRTServerView(null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JTable bufferedRidesTable;
    private javax.swing.JButton generatePodcarsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton loadMapButton;
    private javax.swing.JTextField numberOfPodcarsMustBeGenerated;
    private javax.swing.JPanel podcarPanel;
    private javax.swing.JTable podcarTable;
    private javax.swing.JButton realTimeButton;
    private javax.swing.JPanel ridesPanel;
    private javax.swing.JTable ridesTable;
    private javax.swing.JButton simulatorButton;
    private javax.swing.JButton startServerButton;
    private javax.swing.JPanel statePanel;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JButton stopServerButton;
    private javax.swing.JPanel visualizationPanel;
    private javax.swing.JScrollPane visualizationScrollPane;
    // End of variables declaration//GEN-END:variables
}
